<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[flickr downloadr]]></title>
  <link href="https://flickrdownloadr.com/blogs/atom.xml" rel="self"/>
  <link href="https://flickrdownloadr.com/blogs/"/>
  <updated>2019-01-18T18:43:58-05:00</updated>
  <id>https://flickrdownloadr.com/blogs/</id>
  <author>
    <name><![CDATA[flickr downloadr]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The CI chain reaction that builds flickr downloadr]]></title>
    <link href="https://flickrdownloadr.com/blogs/blog/2014/12/08/the-ci-chain-reaction-that-builds-flickr-downloadr/"/>
    <updated>2014-12-08T14:01:26-05:00</updated>
    <id>https://flickrdownloadr.com/blogs/blog/2014/12/08/the-ci-chain-reaction-that-builds-flickr-downloadr</id>
    <content type="html"><![CDATA[<blockquote><p><strong>Update (6/11/2015)</strong> &ndash; Due to the recent news about malware on installers downloaded from SourceForge, I have decided to stay completely away from it. This is the reason for the move to GitHub releases for archiving the releases.</p>

<hr />

<p>As written on <a href="https://flickrdownloadr.com/blogs/blog/2014/06/12/batch-download-flickr-photos-from-windows-mac-or-linux/">the last entry</a> in this blog, I finally got to write something on points 1) and 2) there &ndash; the CI (continuous integration) builds that are running in parallel on AppVeyor, Travis CI and Wercker and the multi-platform installers they create and publish to the website. I wrote this up as <a href="https://github.com/flickr-downloadr/flickr-downloadr-gtk/blob/bba17e54cdca04e07eb3422d07cc82888bdbb986/continuous-integration.md">documentation on the main GitHub repository</a> but decided to cross-post here on the blog too.</p></blockquote>

<h3>Automated Build Process</h3>

<p>Every commit to the <code>master</code> branch <a href="https://github.com/flickr-downloadr/flickr-downloadr-gtk/">on the source code repository</a> kicks off CI builds (that builds and runs all the unit tests) in three different CI services:</p>

<ul>
<li><a href="https://ci.appveyor.com/project/floydpink/flickr-downloadr-gtk">AppVeyor</a> for Windows</li>
<li><a href="https://travis-ci.org/flickr-downloadr/flickr-downloadr-gtk">Travis CI</a> for Mac OS X</li>
<li><a href="https://app.wercker.com/project/bykey/065aabc1580cec6d31a2daeef61548b0">Wercker</a> for Linux</li>
</ul>


<p>Any commit that has the string <code>[deploy]</code> in the commit message will also build the installers for all three supported platforms, using <a href="http://installbuilder.bitrock.com/">BitRock InstallBuilder</a>.</p>

<p>The installers will be committed separately from the CI builds to a new branch named <code>deploy-v&lt;VERSION&gt;</code> (as an example, for the version<code>v1.0.2.1</code>, the new branch will be <code>deploy-v1.0.2.1</code>) on the <a href="https://github.com/flickr-downloadr/flickr-downloadr.github.io"><code>flickr-downloadr/flickr-downloadr.github.io</code></a> repository.</p>

<p><a href="https://github.com/flickr-downloadr/github-webhook">A custom webhook</a> on the <code>flickr-downloadr/flickr-downloadr.github.io</code> repo that runs on Heroku ensures that installers for all three platforms have been built successfully and then makes a commit with the name of the new branch, updated into the <code>branch</code> file on the <a href="https://github.com/flickr-downloadr/releases"><code>flickr-downloadr/releases</code></a> repository (<code>deploy-v1.0.2.1</code>, in the example above) and sends an email a deployment will be ready to be pushed to the website soon [<a href="https://github.com/flickr-downloadr/github-webhook/blob/c88f106965878d62992db286fcdbca02385def1a/deploy/index.js#L59">see here</a>].</p>

<p>In the event that any of the CI builds fail to create the installer, after at least one installer gets successfully built and committed, the custom webhook waits for 30 minutes from the first installer getting committed and sends an email notifying of a build failure [<a href="https://github.com/flickr-downloadr/github-webhook/blob/c88f106965878d62992db286fcdbca02385def1a/helpers/index.js#L68">see here</a>].</p>

<p>Yet another webhook on the <code>flickr-downloadr/releases</code> repo kicks off another build on <a href="https://app.wercker.com/project/bykey/d981bd85d611e5bb2082c94959272851">Wercker</a> to merge the new branch with all three installers (<code>deploy-v1.0.2.1</code> branch) into the <code>source</code> branch on <code>flickr-downloadr/flickr-downloadr.github.io</code> to make it ready for push into the <code>master</code> branch that runs <a href="https://flickrdownloadr.com">the main website</a>. This CI job does a few other things like archiving this version to <del>SourceForge</del><a href="https://github.com/flickr-downloadr/flickr-downloadr-gtk/releases">GitHub releases</a> etc., as can be seen <a href="https://github.com/flickr-downloadr/releases/blob/master/wercker.yml">here</a>.</p>

<p>The final push to the website is manual and can be done by running <code>grunt deploy</code> on the latest, merged version of the <code>source</code> branch and this will make the latest version installers current on the website.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Batch download flickr photos from Windows, Mac or Linux!]]></title>
    <link href="https://flickrdownloadr.com/blogs/blog/2014/06/12/batch-download-flickr-photos-from-windows-mac-or-linux/"/>
    <updated>2014-06-12T00:34:00-04:00</updated>
    <id>https://flickrdownloadr.com/blogs/blog/2014/06/12/batch-download-flickr-photos-from-windows-mac-or-linux</id>
    <content type="html"><![CDATA[<p>The <a href="https://flickrdownloadr.com/blogs/blog/2014/01/20/contemplating-a-mac-port-of-flickr-downloadr/">previous entry</a> on this blog discussed the idea of probably creating a native, Cocoa, Mac OS X port for the then, Windows-only, WPF version of the app.</p>

<p>Any action started much later from the date of the post; to be precise, more than two months later with the creation of a new repository with <a href="https://github.com/flickr-downloadr/flickr-downloadr-gtk/commit/3f94a6bc13c87f905e3f5be5e9872accb6930f05">this commit</a>. The research that happened in-between helped decide on a third alternative &ndash; that of completely porting over the .NET C#/WPF into a Mono, C#/GTK# app that could work on all of Windows, Mac and Linux.</p>

<p>And exactly after two months and one day <a href="https://github.com/flickr-downloadr/flickr-downloadr-gtk/commit/de399a3526344ea96d1847eff2836e15674a7553">the v1.0</a> of the new GTKSharp enabled flickr downloadr was published on <a href="https://flickrdownloadr.com/blogs/../">this website</a>.</p>

<p>It really was an exhilarating journey of many frustrations, joy, learnings and moments of bliss &ndash; and there are a few things that I would like to follow up in separate entries here. Like:</p>

<ol>
<li>the parallel, multi-platform continuous integration/deployment that happens on <a href="https://ci.appveyor.com/project/floydpink/flickr-downloadr-gtk">AppVeyor (Windows)</a>, <a href="https://travis-ci.org/flickr-downloadr/flickr-downloadr-gtk">Travis CI (Mac)</a> and <a href="https://app.wercker.com/#applications/5363d07d2cbfc1b354003e84">Wercker (Linux)</a>.</li>
<li>the building of a cross-platform installer using the free-for-open-source Enterprise edition of <a href="http://installbuilder.bitrock.com/">Install Builder</a> provided generously by the awesome guys at BitRock.</li>
<li>the slight face-lift applied on the website along with the cut-over to a new, <a href="http://yeoman.io/">Yeoman</a> scaffolded web-app &ndash; complete with its automated <code>grunt</code> build for minification, image compression etc. (do a quick <em>View Source</em> on this page to see the results)</li>
</ol>


<p>&hellip;and many other such learnings and experiences.</p>

<p>So, please spread the word of this new, free, open-source utility for batch downloading photos from flickr that is available on Windows, Mac OS X and Linux (Ubuntu &amp; Mint have been tested).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Contemplating a Mac port of flickr-downloadr]]></title>
    <link href="https://flickrdownloadr.com/blogs/blog/2014/01/20/contemplating-a-mac-port-of-flickr-downloadr/"/>
    <updated>2014-01-20T14:06:00-05:00</updated>
    <id>https://flickrdownloadr.com/blogs/blog/2014/01/20/contemplating-a-mac-port-of-flickr-downloadr</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been a long time since something has been posted on this blog! And really, it&rsquo;s been quite a while since something has been done with the app at all.</p>

<p>And the main reason for that is that I have been focussing more on mobile apps and web apps lately. Combine this with the fact that a Macbook Pro is the primary machine these days and there you have the reason for why this Windows/Visual Studio application has not been getting any attention at all.</p>

<p>But because there is the Mac and there is an increasing desire to learn Cocoa and Objective-C, I have been toying with the idea of porting over the current WPF-based Windows desktop application into a Mac app.</p>

<p>Stay tuned for updates!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Single-click deployment of WPF application to GitHub Pages]]></title>
    <link href="https://flickrdownloadr.com/blogs/blog/2013/01/15/single-click-deployment-of-wpf-application-to-github-pages/"/>
    <updated>2013-01-15T02:03:00-05:00</updated>
    <id>https://flickrdownloadr.com/blogs/blog/2013/01/15/single-click-deployment-of-wpf-application-to-github-pages</id>
    <content type="html"><![CDATA[<h2>Summary</h2>

<p>This post will try to detail:</p>

<ul>
<li>how the <a href="http://nantcontrib.sourceforge.net/release/latest/help/tasks/version.html">NAntContrib Version task</a> is automating the version increment; and then building the <a href="https://flickrdownloadr.com/blogs/../">flickr downloadr</a> WPF app</li>
<li>how the app is being published (via NAnt and MSBuild), for deployment to the <a href="https://flickrdownloadr.com/blogs/../downloads/latest">custom-installation url</a>, which is being hosted at <a href="http://pages.github.com/">GitHub Pages</a>)</li>
<li>how some shell scripting helps to automate the upload of this published application to the site</li>
</ul>


<h2>Introduction</h2>

<p>The <a href="https://flickrdownloadr.com/blogs/../downloads/latest">downloads</a> page on flickrdownloadr.com has a link to the latest published version of the application listed there along with the current version number. For the first few times, this page was being updated manually. But because it&rsquo;s still very early phases of development, where we are going to be releasing quite a few times and also because <a href="http://en.wikipedia.org/wiki/Release_early,_release_often">release early, release often</a> is a good philosophy to try and practice, the need to automate this app-deployment-process soon arose.</p>

<p>Ideally, the publish process detailed here would be run from a CI environment, but that is not happening right now for a couple of reasons:</p>

<ol>
<li>There are no free and hosted CI services <em>that</em> runs the .NET version (v4.5) that flickrdownloadr is built on. Even though <a href="http://teamcity.codebetter.com">Codebetter CI</a> has kindly agreed to use their service for <a href="http://teamcity.codebetter.com/project.html?projectId=project228&amp;tab=projectOverview">this project</a> and there were quite a few successful builds earlier, they do not support v4.5 yet.</li>
<li>The deploy shell script (that is explained below) relies on the SSH identity to authenticate to GitHub to be already established when it runs. I haven&rsquo;t figured out how else to handle the GitHub authentication (with write access) from a CI environment, without publicly storing the credentials in the repository.</li>
</ol>


<p>The app is being published using the <a href="http://msdn.microsoft.com/en-us/library/t71a733d(v=vs.110).aspx">ClickOnce deployment</a> methodology that is built-in to the Visual Studio IDE. Publishing a WPF application using ClickOnce manually, from within the Visual Studio IDE is a pretty straight-forward process and there are good tutorials to guide through the step-by-step wizard. But publishing from within the IDE is hardly something we could run as part of an automated setup.</p>

<!-- more -->


<p><a href="http://nant.sourceforge.net/">NAnt</a> has been working quite well for me, with all the build automation, unit testing and CI needs, I was inclined to trying to use it for this deployment automation as well. And even though there are a few relevant hits involving NAnt, MSBuild and ClickOnce when you google for &ldquo;ClickOnce NAnt&rdquo;, there are a few gotchas in those articles, that are only just being stated and not really solved, especially with my specific environment and such. These include:</p>

<ul>
<li>The auto increment of the version number would happen only when published from within Visual Studio and not from MSBuild</li>
<li>The deployment web page (with information about the version etc.) is generated only for a manual publish from the IDE</li>
<li>There is no way to include the current version of the application into the product name (that would be seen by the end user in their Start Menu and/or desktop shortcut.</li>
</ul>


<p>So I started piecing together the below process, standing on the shoulders of many of those nice articles/tutorials. And the below detailed process is what&rsquo;s been working for me right now for the automation of the ClickOnce deployment into the flickr downloadr website hosted at  GitHub Pages. The <code>deploy.bat</code> command is run from within <code>/build</code> directory of the <code>master</code> branch, which essentially runs NAnt with a build file that has a few targets to:</p>

<ul>
<li>increment the app version</li>
<li>compile the application</li>
<li>publish it to local directory and</li>
<li>call the shell script to

<blockquote><ul>
<li><small>clone the <code>gh-pages</code> branch from the GitHub repo to which we&rsquo;re publishing</small></li>
<li><small>commit and push the published ClickOnce application files</small></li>
<li><small>checkout the <code>master</code> branch, where the app itself is</small></li>
<li><small>commit and push the updated <code>version number</code> and <code>AssemblyInfo.cs</code> files</small></li>
</ul>
</blockquote></li>
</ul>


<p>After that brief intro, let&rsquo;s get into the details. And some code snippets.</p>

<h2><em>As the <code>code</code> flies !</em></h2>

<h6>Following the deploy process along with flow of the lines of code that does it</h6>

<p>The sequence of steps from the single-click deployment process, gets kicked off by the <code>deploy.bat</code> file. Here are the contents of that file:</p>

<figure class='code'><figcaption><span>deploy.bat</span><a href='https://github.com/flickr-downloadr/flickr-downloadr/blob/master/build/deploy.bat'>on GitHub</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bat'><span class='line'>go deploy Release
</span><span class='line'><span class="k">pause</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here <code>go</code> is another batch file that is there in the same directory:</p>

<figure class='code'><figcaption><span>go.bat</span><a href='https://github.com/flickr-downloadr/flickr-downloadr/blob/master/build/go.bat'>on GitHub</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bat'><span class='line'><span class="p">@</span><span class="k">echo</span> <span class="k">off</span>
</span><span class='line'><span class="k">IF</span> dummy<span class="o">==</span>dummy<span class="nv">%2</span> (
</span><span class='line'>nant\nant<span class="m">-0</span>.<span class="m">92</span>\bin\NAnt.exe -buildfile:FlickrDownloadr.build <span class="nv">%1</span> -D:project.build.type<span class="o">=</span>Debug
</span><span class='line'>) <span class="k">ELSE</span> (
</span><span class='line'>nant\nant<span class="m">-0</span>.<span class="m">92</span>\bin\NAnt.exe -buildfile:FlickrDownloadr.build <span class="nv">%1</span> -D:project.build.type<span class="o">=</span><span class="nv">%2</span>
</span><span class='line'>)
</span><span class='line'>date <span class="n">/t</span> &amp;&amp; time <span class="n">/t</span>
</span><span class='line'><span class="k">pause</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, as evident here, this calls NAnt with <code>FlickrDownloadr.build</code> as the build file and <code>deploy</code> as the target to run, with <code>Release</code> as the build configuration.</p>

<figure class='code'><figcaption><span>deploy</span><a href='https://github.com/flickr-downloadr/flickr-downloadr/blob/5ed83541e657318da0cf5ef25bac53c60a709eea/build/FlickrDownloadr.build#L110'>on GitHub</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;target</span> <span class="na">name=</span><span class="s">&quot;deploy&quot;</span> <span class="na">depends=</span><span class="s">&quot;publish&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;exec</span> <span class="na">program=</span><span class="s">&quot;bash.exe&quot;</span> <span class="na">basedir=</span><span class="s">&quot;C:\Program Files (x86)\Git\bin\&quot;</span> <span class="na">verbose=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;environment&gt;</span>
</span><span class='line'>        <span class="nt">&lt;variable</span> <span class="na">name=</span><span class="s">&quot;HOME&quot;</span> <span class="na">value=</span><span class="s">&quot;${environment::get-variable(&#39;userprofile&#39;)}&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;variable</span> <span class="na">name=</span><span class="s">&quot;ADDPATH&quot;</span> <span class="na">value=</span><span class="s">&quot;.:/usr/local/bin:/mingw/bin:/bin:/bin&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;variable</span> <span class="na">name=</span><span class="s">&quot;BUILDNUMBER&quot;</span> <span class="na">value=</span><span class="s">&quot;${buildnumber.version}&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/environment&gt;</span>
</span><span class='line'>      <span class="nt">&lt;arg</span> <span class="na">file=</span><span class="s">&quot;deploy.sh&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/exec&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/target&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This target first waits for its dependant target <code>publish</code> to execute. Let&rsquo;s see what that does first and we shall come back to this target to see when it would execute the <code>deploy.sh</code> bash script.</p>

<figure class='code'><figcaption><span>publish</span><a href='https://github.com/flickr-downloadr/flickr-downloadr/blob/5ed83541e657318da0cf5ef25bac53c60a709eea/build/FlickrDownloadr.build#L121'>on GitHub</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;target</span> <span class="na">name=</span><span class="s">&quot;publish&quot;</span> <span class="na">depends=</span><span class="s">&quot;compilesolution&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;msbuild</span> <span class="na">project=</span><span class="s">&quot;${source.directory}\${flickrdownloadr.app.project}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;arg</span> <span class="na">value=</span><span class="s">&quot;/v:m&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;arg</span> <span class="na">value=</span><span class="s">&quot;/p:IsWebBootstrapper=true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;arg</span> <span class="na">value=</span><span class="s">&quot;/p:UpdateEnabled=true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;arg</span> <span class="na">value=</span><span class="s">&quot;/p:UpdateMode=Foreground&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;arg</span> <span class="na">value=</span><span class="s">&quot;/p:UpdateInterval=7&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;arg</span> <span class="na">value=</span><span class="s">&quot;/p:UpdateIntervalUnits=Days&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;arg</span> <span class="na">value=</span><span class="s">&quot;/p:UpdatePeriodically=false&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;arg</span> <span class="na">value=</span><span class="s">&quot;/p:Configuration=${project.build.type}&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;arg</span> <span class="na">value=</span><span class="s">&quot;/p:PublisherName=flickrdownloadr&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;arg</span> <span class="na">value=</span><span class="s">&quot;/p:ProductName=flickr downloadr (beta v${buildnumber.version})&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;arg</span> <span class="na">value=</span><span class="s">&quot;/p:ApplicationVersion=${buildnumber.version}&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;arg</span> <span class="na">value=</span><span class="s">&quot;/p:PublishDir=${bin.dir}\Deploy\&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;arg</span> <span class="na">value=</span><span class="s">&quot;/p:InstallUrl=https://flickrdownloadr.com/downloads/latest/&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;arg</span> <span class="na">value=</span><span class="s">&quot;/p:SupportUrl=https://flickrdownloadr.com/downloads/latest/&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;arg</span> <span class="na">value=</span><span class="s">&quot;/p:ErrorReportUrl=https://flickrdownloadr.com/&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;arg</span> <span class="na">value=</span><span class="s">&quot;/p:BootstrapperEnabled=true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;arg</span> <span class="na">value=</span><span class="s">&quot;/p:CreateDesktopShortcut=true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;arg</span> <span class="na">value=</span><span class="s">&quot;/p:CreateWebPageOnPublish=true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;arg</span> <span class="na">value=</span><span class="s">&quot;/p:WebPage=index.html&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;arg</span> <span class="na">value=</span><span class="s">&quot;/t:publish&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/msbuild&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/target&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This target again has another dependant target which is the compilation of the solution. Before we go there though, let&rsquo;s take one more closer look at this <code>publish</code> target.</p>

<p>It&rsquo;s simple invocation of the <code>msbuild</code> task (from NAntContrib) to invoke the <code>publish</code> build configuration (the line with <code>&lt;arg value="/t:publish" /&gt;</code> towards the end) on the WPF application <em>project</em> (and not the whole VS solution, which is what, as you&rsquo;d see in a bit, the compilation invokes). A few of the properties being specified in there are moot though, for example, the install web page does not get created even with the really, positively asserting property in there!</p>

<p>The <code>compilesolution</code> task is another straight-forward one like this:</p>

<figure class='code'><figcaption><span>compilesolution</span><a href='https://github.com/flickr-downloadr/flickr-downloadr/blob/5ed83541e657318da0cf5ef25bac53c60a709eea/build/FlickrDownloadr.build#L40'>on GitHub</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;target</span> <span class="na">name=</span><span class="s">&quot;compilesolution&quot;</span> <span class="na">depends=</span><span class="s">&quot;cleanBin, createBin, increment-version&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;echo</span> <span class="na">message=</span><span class="s">&quot;Compiling Solution:&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;exec</span> <span class="na">program=</span><span class="s">&quot;msbuild.exe&quot;</span>  <span class="na">basedir=</span><span class="s">&quot;C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319&quot;</span>
</span><span class='line'>            <span class="na">commandline=</span><span class="s">&#39;&quot;${source.directory}\${flickrdownloadr.solution}&quot; /p:Platform=&quot;Any CPU&quot; /p:Configuration=${project.build.type} /t:Rebuild /v:m /m&#39;</span> <span class="na">workingdir=</span><span class="s">&quot;.&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/target&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As mentioned earlier, this time around MSBuild is being invoked on the Visual Studio solution itself. But the most interesting aspect here is the <code>increment-version</code> target that is a dependency:</p>

<figure class='code'><figcaption><span>increment-version</span><a href='https://github.com/flickr-downloadr/flickr-downloadr/blob/5ed83541e657318da0cf5ef25bac53c60a709eea/build/FlickrDownloadr.build#L66'>on GitHub</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;target</span> <span class="na">name=</span><span class="s">&quot;increment-version&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;echo</span> <span class="na">message=</span><span class="s">&quot;Incrementing the version:&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version</span> <span class="na">buildtype=</span><span class="s">&quot;NoIncrement&quot;</span> <span class="na">revisiontype=</span><span class="s">&quot;Increment&quot;</span> <span class="na">startdate=</span><span class="s">&quot;2012-04-02&quot;</span> <span class="na">verbose=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;call</span> <span class="na">target=</span><span class="s">&quot;create-common-assemblyinfo&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/target&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>First the NAntContrib <code>version</code> task is being run and then the <code>create-common-assemblyinfo</code> target is called.</p>

<p>The version task, if you read it along with <a href="http://nantcontrib.sourceforge.net/release/latest/help/tasks/version.html">its documentation</a>, you would see that only the revision number is being incremented here in flickrdownloadr, though you could use this task to increment the build number if you so choose. The major and minor versions are always supposed to be manually updated, by editing the build.number text file.</p>

<p>Then we get to the <a href="http://nant.sourceforge.net/release/latest/help/tasks/asminfo.html">NAnt asminfo</a> task to generate one, shared <code>CommonAssemblyInfo.cs</code> file, which is linked to by all the projects in the solution as their <code>AssemblyInfo.cs</code> modules.</p>

<figure class='code'><figcaption><span>create-common-assemblyinfo</span><a href='https://github.com/flickr-downloadr/flickr-downloadr/blob/5ed83541e657318da0cf5ef25bac53c60a709eea/build/FlickrDownloadr.build#L72'>on GitHub</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;target</span> <span class="na">name=</span><span class="s">&quot;create-common-assemblyinfo&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- ensure source/CommonAssemblyInfo.cs is writable if it already exists --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;attrib</span> <span class="na">file=</span><span class="s">&quot;${source.directory}/CommonAssemblyInfo.cs&quot;</span> <span class="na">readonly=</span><span class="s">&quot;false&quot;</span> <span class="na">if=</span><span class="s">&quot;${file::exists(&#39;${source.directory}/CommonAssemblyInfo.cs&#39;)}&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- Get Copyright Symbol --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script</span> <span class="na">language=</span><span class="s">&quot;C#&quot;</span> <span class="na">prefix=</span><span class="s">&quot;csharp-functions&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;code&gt;</span>
</span><span class='line'>        <span class="cp">&lt;![CDATA[</span>
</span><span class='line'><span class="cp">              [Function(&quot;get-copyright-symbol&quot;)]</span>
</span><span class='line'><span class="cp">              public static string Testfunc(  ) {</span>
</span><span class='line'><span class="cp">                  return &quot;\u00a9&quot;;</span>
</span><span class='line'><span class="cp">              }</span>
</span><span class='line'><span class="cp">            ]]&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/code&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- generate the source file holding the common assembly-level attributes --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;asminfo</span> <span class="na">output=</span><span class="s">&quot;${source.directory}/CommonAssemblyInfo.cs&quot;</span> <span class="na">language=</span><span class="s">&quot;CSharp&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;imports&gt;</span>
</span><span class='line'>        <span class="nt">&lt;import</span> <span class="na">namespace=</span><span class="s">&quot;System&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;import</span> <span class="na">namespace=</span><span class="s">&quot;System.Reflection&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;import</span> <span class="na">namespace=</span><span class="s">&quot;System.Runtime.InteropServices&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/imports&gt;</span>
</span><span class='line'>      <span class="nt">&lt;attributes&gt;</span>
</span><span class='line'>        <span class="nt">&lt;attribute</span> <span class="na">type=</span><span class="s">&quot;ComVisibleAttribute&quot;</span> <span class="na">value=</span><span class="s">&quot;false&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;attribute</span> <span class="na">type=</span><span class="s">&quot;AssemblyTitleAttribute&quot;</span> <span class="na">value=</span><span class="s">&quot;flickrDownloadr&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;attribute</span> <span class="na">type=</span><span class="s">&quot;AssemblyDescriptionAttribute&quot;</span> <span class="na">value=</span><span class="s">&quot;A desktop application for windows that would help download all (or selected) photos from the user&#39;s photostream (in one of the selected sizes) along with the tags, titles and descriptions.&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;attribute</span> <span class="na">type=</span><span class="s">&quot;AssemblyConfigurationAttribute&quot;</span> <span class="na">value=</span><span class="s">&quot;${project.build.type}&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;attribute</span> <span class="na">type=</span><span class="s">&quot;AssemblyCompanyAttribute&quot;</span> <span class="na">value=</span><span class="s">&quot;https://flickrdownloadr.com&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;attribute</span> <span class="na">type=</span><span class="s">&quot;AssemblyProductAttribute&quot;</span> <span class="na">value=</span><span class="s">&quot;flickr downloadr&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;attribute</span> <span class="na">type=</span><span class="s">&quot;AssemblyCopyrightAttribute&quot;</span> <span class="na">value=</span><span class="s">&quot;Copyright ${csharp-functions::get-copyright-symbol()} 2012-${datetime::get-year(datetime::now())} flickr downloadr&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;attribute</span> <span class="na">type=</span><span class="s">&quot;AssemblyTrademarkAttribute&quot;</span> <span class="na">value=</span><span class="s">&quot;&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;attribute</span> <span class="na">type=</span><span class="s">&quot;AssemblyCultureAttribute&quot;</span> <span class="na">value=</span><span class="s">&quot;&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;attribute</span> <span class="na">type=</span><span class="s">&quot;AssemblyVersionAttribute&quot;</span> <span class="na">value=</span><span class="s">&quot;${buildnumber.version}&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;attribute</span> <span class="na">type=</span><span class="s">&quot;AssemblyFileVersionAttribute&quot;</span> <span class="na">value=</span><span class="s">&quot;${buildnumber.version}&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;attribute</span> <span class="na">type=</span><span class="s">&quot;AssemblyInformationalVersionAttribute&quot;</span> <span class="na">value=</span><span class="s">&quot;${buildnumber.major}.${buildnumber.minor}&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/attributes&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/asminfo&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/target&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I noticed (and learned about) this little beauty for the first time in the <a href="https://github.com/nant/nant/blob/7d81f6f2e4f35711e57de7306773cefc3875cd71/NAnt.build#L92">NAnt build file</a> for the NAnt project itself!</p>

<p>So then, by the time the application is compiled, the version (automatically, only the revision; or if the major/minor/build numbers have been manually updated, them too) would have been incremented and a new <code>CommonAssemblyInfo.cs</code> with this value would have been generated, which all the projects are linking to. So all of the assemblies being generated by the compilation would now have the updated version numbers.</p>

<p>Coming back to the <code>publish</code> target now, it creates the ClickOnce deployable application files into the directory specified (<code>&lt;arg value="/p:PublishDir=${bin.dir}\Deploy\"/&gt;</code>) also with the dynamic version number as the publish version (<code>&lt;arg value="/p:ApplicationVersion=${buildnumber.version}"/&gt;</code>).</p>

<p>Also, this version string would be included in the product name as well (<code>&lt;arg value="/p:ProductName=flickr downloadr (beta v${buildnumber.version})"/&gt;</code>), so everytime there is a release, the name of the app itself (only the name, it will still be treated as the same app as the older version by Windows, the ClickOnce updater service etc.) will have the current deployed version number in it; a la <strong>flickr downloadr (beta v0.3.4.26)</strong>. Ain&rsquo;t that nice?</p>

<p>Moving onto the not-so-short bash script we are running as part of the <code>deploy</code> target that invoked the <code>publish</code>. Before we get into the script itself if you scroll back up to the snippet that invokes it, there are a couple of environment variables being added from NAnt to be made available in the bash. That maneuver took sometime to discover, but I thought it&rsquo;s a nice little way to pass stuff in to the bash script from within the build environment. And most importantly for us, this includes the <code>BUILDNUMBER</code> variable as well which has the current app version.</p>

<p>The first 50 lines within the <code>deploy.sh</code> script is to ensure that the currently logged in SSH identity is being reused (probably there is a better way to do this, or a few lines could be shaved off from this version itself as there is no way one would expect the deploy script to interactively ask to login afresh, if no one is already logged in. Anyways&hellip;). I thought the rest of the bash script is also pretty self explanatory, so I am just linking it all here:</p>

<div><script src='https://gist.github.com/4536562.js?file=deploy.sh'></script>
<noscript><pre><code>PATH=$HOME/bin:$ADDPATH:$PATH
SSH_ENV=&quot;$HOME/.ssh/environment&quot;

# start the ssh-agent
function start_agent {
    echo &quot;Initializing new SSH agent...&quot;
    # spawn ssh-agent
    ssh-agent | sed 's/^echo/#echo/' &gt; &quot;$SSH_ENV&quot;
    echo succeeded
    chmod 600 &quot;$SSH_ENV&quot;
    . &quot;$SSH_ENV&quot; &gt; /dev/null
    ssh-add
}

# test for identities
function test_identities {
    # test whether standard identities have been added to the agent already
    ssh-add -l | grep &quot;The agent has no identities&quot; &gt; /dev/null
    if [ $? -eq 0 ]; then
        ssh-add
        # $SSH_AUTH_SOCK broken so we start a new proper agent
        if [ $? -eq 2 ];then
            start_agent
        fi
    fi
}

# check for running ssh-agent with proper $SSH_AGENT_PID
if [ -n &quot;$SSH_AGENT_PID&quot; ]; then
    ps -ef | grep &quot;$SSH_AGENT_PID&quot; | grep ssh-agent &gt; /dev/null
    if [ $? -eq 0 ]; then
  test_identities
    fi
# if $SSH_AGENT_PID is not properly set, we might be able to load one from
# $SSH_ENV
else
    if [ -f &quot;$SSH_ENV&quot; ]; then
  . &quot;$SSH_ENV&quot; &gt; /dev/null
    fi
    ps -ef | grep &quot;$SSH_AGENT_PID&quot; | grep ssh-agent &gt; /dev/null
    if [ $? -eq 0 ]; then
        test_identities
    else
        start_agent
    fi
fi

cd ../source/bin/Release
REPO=git@github.com:flickr-downloadr/flickr-downloadr.git
MSG=&quot;application (v${BUILDNUMBER})&quot;

#clone repo in a tmp dir
mkdir tmp-gh-pages
cd tmp-gh-pages
git clone -b gh-pages $REPO
cd flickr-downloadr
git config push.default tracking

#remove all files except index.html in downloads/latest
mv downloads/latest/index.html .
cd downloads/latest/
git rm -r .
cd ../..
mv index.html downloads/latest

#add published files &amp; build.number to gh-pages; commit; push
cp -r ../../Deploy/* ./downloads/latest
cp ../../../../../build/build.number .
git add .
git commit -m &quot;deploying $MSG&quot; -s
git push

#checkout master to add the modified build.number and CommonAssemblyInfo; commit; push
git checkout master
cp ../../../../../build/build.number ./build
cp ../../../../CommonAssemblyInfo.cs ./source
git commit -a -m &quot;deploying $MSG&quot; -s
git push

#remove the tmp dir
cd ../..
rm -rf tmp-gh-pages

#reset the modified build.number and CommonAssemblyInfo in the main (outer) repo
cd ../../..
git checkout -- build/build.number source/CommonAssemblyInfo.cs

# done
echo &quot;deployed $MSG successfully&quot;
exit</code></pre></noscript></div>


<p>If you notice, the <code>build.number</code> file (which is what gets updated by the <code>version</code> task and therefore holds the current version of the app), is being copied over to the <code>gh-pages</code> branch and being committed everytime. This text file is then dynamically queried via jQuery ajax from the home page and the downloads page, to fetch and display the current version of the deployed application.</p>

<p>Even though this is a very minor piece in the whole scheme of things, to have the site show the version number of the latest available release (that too, let me do this one more time, with a deployment effort of a single-click), I thought was a really cool thing.</p>

<p>One really nagging thing after everything started (seemingly) working as expected, was that the ClickOnce updater/installer started complaining about some signing or manifest or something (I can&rsquo;t find the exact error now, shall recreate it and update here soon) and would not install/upgrade the app at all. After some googling  found out that it had to do with how the cr-lf differences between Windows and *NIX are being handled by the Git clients and/or GitHub etc.</p>

<p>To fix this, a <code>.gitattributes</code> file was added into the <code>gh-pages</code> branch <code>downloads</code> directory, following <a href="https://help.github.com/articles/dealing-with-line-endings">this helpfile at GitHub</a>, to the effect of asking git to treat everything within the <code>/downloads</code> directory as non-text files:</p>

<figure class='code'><figcaption><span>.gitattributes</span><a href='https://github.com/flickr-downloadr/flickr-downloadr/blob/gh-pages/downloads/.gitattributes'>on GitHub</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*  -text</span></code></pre></td></tr></table></div></figure>


<h2>That&rsquo;s it!</h2>

<p>All of that put together, the latest version could now be deployed to the <a href="https://flickrdownloadr.com/blogs/../downloads/latest">flickrdownloadr.com</a> web site just by running a batch file.</p>

<p>A couple of things to note though:
1. If there are local changes (that are committed or not), it would be a good idea to commit and push them all before deploy. This is especially for avoiding unnecessary conflicts to files like <code>build.number</code> or <code>CommonAssemblyInfo.cs</code> from within the <code>deploy.sh</code>
2. Also running a pull on the local repo before running the deploy would be a good thing.</p>

<p>Hopefully this would help you in setting up your one-click ClickOnce deployment.</p>

<p>Continuous Deployment, for the win !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello, World!]]></title>
    <link href="https://flickrdownloadr.com/blogs/blog/2013/01/07/hello-world/"/>
    <updated>2013-01-07T20:31:00-05:00</updated>
    <id>https://flickrdownloadr.com/blogs/blog/2013/01/07/hello-world</id>
    <content type="html"><![CDATA[<h4>Hello, and a hearty welcome to the flickr downloadr blog!</h4>

<p><a href="https://flickrdownloadr.com/blogs/../">flickr downloadr</a> was conceived back in May 2012 when I surprisingly discovered that even with the awesome <a href="http://www.flickr.com/services/api/">API</a> that flickr provides there are no free and/or open source app that lets one download their photos <em>along with the metadata</em>. I also wanted to learn the <a href="http://msdn.microsoft.com/en-us/library/ms754130.aspx" title="Windows Presentation Foundation">WPF</a> and <strong>flickr downloadr</strong> was born.</p>

<p>But soon after the authentication modules using <a href="http://en.wikipedia.org/wiki/OAuth" title="OAuth">OAuth</a> were done, the enthusiasm died and there was a brief hiatus in the development and it is recently that it has gained some momentum again. As of this writing, the latest beta version of the app works on any version of Windows that can run <a href="http://msdn.microsoft.com/en-us/library/w0x726c2.aspx">.NET framework 4.5</a>, which is Windows Vista (untested), Windows 7 and Windows 8.</p>

<!-- more -->


<p>There are quite a few rough edges and a few known issues, but when signed in with a flickr <a href="http://www.flickr.com/help/limits/#28">Pro</a> (read <em>paid</em>) account, the app would show all of the photos from the logged in user&rsquo;s photostream. All of the photos, or a selection could then be downloaded and again, as of the version of this writing (v0.6.3.1), the location where photos are downloaded, the size, and the associated metadata are all hard-coded.</p>

<p>In the coming months, the plan is to add a way to capture user preferences for some of the things mentioned above and also to fix the few known bugs/defects.</p>

<p>If you are windows user who has a Pro account on flickr, please <a href="https://flickrdownloadr.com/blogs/../downloads/latest">download and install</a> the app and let me know your comments/suggestions. If you are .NET/WPF developer and/or an open source enthusiast, please checkout the <a href="https://github.com/flickr-downloadr/flickr-downloadr">source over at GitHub</a> and leave your comments/suggestions/criticisms on the code.</p>

<p>Thanks. And have a beautiful day !</p>
]]></content>
  </entry>
  
</feed>
